#!/bin/bash
# __SP_application: functions (kickstart)
# __SP_version: 1
# __SP_runtime: bash
# __SP_api_version: 2
#

# init --------------------------------------------------------------------------
USELIB=()


# error handling ----------------------------------------------------------------
function errmsg() {
  local name=$(basename $0)
  echo -e "${name}: Error ($*)" >&2
}

function warnmsg() {
  local name=$(basename $0)
  echo -e "${name}: Warning ($*)" >&2
}


# library loader ----------------------------------------------------------------
function uselib() {
  local isex=${2:-true}
  # loads a library from ${shellpack_lib}
  if test -z "${1}" ; then
    errmsg "Empty library";
    if $isex ; then
      exit 1
    else
      return 1
    fi
  fi

  local lib="${1}.${shellpack_libext}"
  local libpath="${shellpack_lib}/${lib}"

  # check path
  if ! test -r "${libpath}" ; then
    errmsg "no ${lib} in ${shellpack_lib}";
    if $isex ; then
      exit 2
    else
      return 2
    fi
  fi

  # check loaded libs
  for ul in ${uselib} ; do
    if test "${ul}" = "${lib}" ; then
      errmsg "${lib} is already loaded"
      if $isex ; then
        exit 3
      else
        return 3
      fi
    fi
  done

  # check api version
  local libapiv=`head -5 ${libpath} | 
           grep ${shellpack_lib_preid}"api_version" | 
           awk '{split($0,arr,":");gsub("\\\W+","",arr[2]);print arr[2]}'`
  libapiv=${libapiv// /}
  local shellpack_api_version=${shellpack_api_version// /}
  if test "${libapiv}" != "${shellpack_api_version}" ; then
    errmsg "api ver mismatch for ${lib} L:${libapiv} SP:${shellpack_api_version}"
    if $isex ; then
      exit 4
    else
      return 4
    fi
  fi

  # load the library config
  local libconf="${shellpack_cfg}/${lib}.${OSTYPE}.cfg"
  if test -r ${libconf} ; then
    . ${libconf}
  else
    libconf="${shellpack_cfg}/${lib}.cfg"
    if ! test -r ${libconf} ; then
      errmsg "no library config for ${lib}"
      if $isex ; then
        exit 5
      else
        return 5
      fi
    fi
    . ${libconf}
  fi

  # load the library
  . ${libpath}
  local uln=${#uselib[@]}
  USELIB[${uln}]="${lib}"
  return 0
} # end uselib


# lock handling -----------------------------------------------------------------
# if is_lock LOCK ; then
#   this part runs when LOCK is there
# fi
function is_lock() {
  if test -z "${1}" ; then
    errmsg "lock name"
    return 1
  fi

  local lock="${1}"
  local lockfile="${shellpack_lock}/${lock}"
  if test -w ${lockfile} ; then
    return 0
  fi
  return 2
} # end is_lock


# if create_lock LOCK ; then
#   this part runs when LOCK is created
# fi
function create_lock() {
  if test -z "${1}" ; then
    errmsg "lock name"
    return 1
  fi

  local lock="${1}"
  local lockfile="${shellpack_lock}/${lock}"
  if is_lock "${lock}" ; then
    return 2
  fi

  local now=`date +"%Y-%m-%d[%H:%M:%S]"`
  echo "LOCK=\"${lock}\""  > "${lockfile}"
  echo "DATE=\"${now}\""  >> "${lockfile}"
  return 0
} # end create_lock


# if print_into_lock LOCK MSG ; then
#   this part runs when MSG is written to LOCK
# fi
function print_into_lock() {
  if test -z "${1}" || test -z "${2}" ; then
    errmsg "lock name"
    return 1
  fi

  local lock="${1}"
  local lockfile="${shellpack_lock}/${lock}"
  local msg="${2}"

  if is_lock "${lock}" ; then
    echo "${msg}" >> ${lockfile}
    return 0
  fi

  return 2
} # end print_into_lock


# if delete_lock LOCK ; then
#   this part runs when LOCK is deleted
# fi
function delete_lock() {
  if test -z "${1}" ; then
    errmsg "lock name"
    return 1
  fi

  local lock="${1}"
  local lockfile="${shellpack_lock}/${lock}"

  if is_lock "${lock}" ; then
    rm -f "${lockfile}"
    return $?
  fi

  return 2
} # end delete_lock


# directory handling ------------------------------------------------------------
function create_directory() {
  if test -z "${1}" ; then
    errmsg "directory name"
    return 1
  fi

  local directory="${1}"
  if ! test -d "${directory}" ; then
    mkdir -p "${directory}"
    local ret=$?
    if test $ret -gt 0 ; then
      errmsg "directory $directory can't be created"
    fi
    return $ret
  fi
  return 0
}


function delete_directory() {
  if test -z "${1}" ; then
    errmsg "directory name"
    return 1
  fi

  local directory="${1}"
  if test -d "${directory}" ; then
    rm -fR "${directory}"
    local ret=$?
    if test $ret -gt 0 ; then
      errmsg "directory $directory can't be deleted"
    fi
    return $ret
  fi
  return 0
}


# link handling -----------------------------------------------------------------
function create_symlink() {
  if test -z "${1}" || test -z "${2}" ; then
    errmsg "symlink name"
    return 1
  fi

  local src="${1}"
  local dst="${2}"
  if ! test -L "${dst}" ; then
    ln -s "${src}" "${dst}"
    return $?
  fi
  return 0
}


function delete_symlink() {
  if test -z "${1}" ; then
    errmsg "symlink name"
    return 1
  fi
  local slink="${1}"

  if test -L "${slink}" ; then
    rm -f "${slink}"
    return $?
  fi
  return 0
}


function yesno() {
  local msg="${1:-Answer}"
  local ans
  echo -n "${msg} (y - yes / n - no): "
  read ans
  case "$ans" in
    "y" | "Y")
      return 0
    ;;
    "n" | "N")
      errmsg "abort"
      return 5
    ;;
    *)
      errmsg "invalid answer"
      return 6
    ;;
  esac
  return 7
}


function prnsln() {
  echo "--------------------------------------------------------------------------------"
}

function prndln() {
  echo "================================================================================"
}
